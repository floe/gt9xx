From 8f2a62ff67233d0eb32221dc4f9bb1574a68abc4 Mon Sep 17 00:00:00 2001
From: Irina Tirdea <irina.tirdea@intel.com>
Date: Sun, 11 Sep 2016 21:20:53 +0300
Subject: [PATCH] Input: goodix - enable reset sequence for Chuwi Hi12 tablet

Goodix touchscreen on Chuwi Hi12 tablet sometimes fails to
initialize properly. When this happens, the driver cannot
read the configuration registers from the device (reads only 0s),
so it does not properly initialize attributes like interrupt flags.

To avoid problems with device power on, the Goodix datasheet
recommends that the driver resets the device. Enabling the reset
sequence for Chuwi Hi12 tablet through dmi quirks.

The full report of this problem can be found in Bugzilla:
https://bugzilla.kernel.org/show_bug.cgi?id=156511

Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
---
 drivers/input/touchscreen/goodix.c | 46 ++++++++++++++++++++++++++++--
 1 file changed, 44 insertions(+), 2 deletions(-)

diff --git a/drivers/input/touchscreen/goodix.c b/drivers/input/touchscreen/goodix.c
index 1a2e9185a4759..82259f8029fb2 100644
--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -119,6 +119,23 @@ static const struct dmi_system_id rotated_screen[] = {
 	{}
 };
 
+/*
+ * Some platforms specify the gpio pins for interrupt and reset properly
+ * in ACPI, but do not describe them using _DSD properties.
+ */
+static const struct dmi_system_id goodix_gpios_int_first_support[] = {
+#if defined(CONFIG_DMI) && defined(CONFIG_X86)
+	{
+		.ident = "Chuwi Hi12",
+		.matches = {
+			DMI_MATCH(DMI_BOARD_VENDOR, "Hampoo"),
+			DMI_MATCH(DMI_BOARD_NAME, "Cherry Trail CR")
+		}
+	},
+#endif
+	{}
+};
+
 /**
  * goodix_i2c_read - read data from a register of the i2c slave device.
  *
@@ -647,6 +664,15 @@ static void goodix_close(struct input_dev *input_dev)
 	atomic_dec(&ts->open_count);
 }
 
+static const struct acpi_gpio_params goodix_first_gpio = { 0, 0, false };
+static const struct acpi_gpio_params goodix_second_gpio = { 1, 0, false };
+
+static const struct acpi_gpio_mapping goodix_gpios_int_first[] = {
+	{ GOODIX_GPIO_INT_NAME "-gpio", &goodix_first_gpio, 1 },
+	{ GOODIX_GPIO_RST_NAME "-gpio", &goodix_second_gpio, 1 },
+	{ },
+};
+
 /**
  * goodix_get_gpio_config - Get GPIO config from ACPI/DT
  *
@@ -662,6 +688,15 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 		return -EINVAL;
 	dev = &ts->client->dev;
 
+	if (dmi_check_system(goodix_gpios_int_first_support) &&
+	    ACPI_HANDLE(dev)) {
+		error = acpi_dev_add_driver_gpios(ACPI_COMPANION(dev),
+						  goodix_gpios_int_first);
+		if (error)
+			return error;
+		dev_dbg(&ts->client->dev, "Applying gpios quirk\n");
+	}
+
 	/* Get the interrupt GPIO pin number */
 	gpiod = devm_gpiod_get_optional(dev, GOODIX_GPIO_INT_NAME, GPIOD_IN);
 	if (IS_ERR(gpiod)) {
@@ -669,7 +704,7 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 		if (error != -EPROBE_DEFER)
 			dev_dbg(dev, "Failed to get %s GPIO: %d\n",
 				GOODIX_GPIO_INT_NAME, error);
-		return error;
+		goto out_err;
 	}
 
 	ts->gpiod_int = gpiod;
@@ -681,12 +716,17 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 		if (error != -EPROBE_DEFER)
 			dev_dbg(dev, "Failed to get %s GPIO: %d\n",
 				GOODIX_GPIO_RST_NAME, error);
-		return error;
+		goto out_err;
 	}
 
 	ts->gpiod_rst = gpiod;
 
 	return 0;
+
+out_err:
+	if (ACPI_HANDLE(dev))
+		acpi_dev_remove_driver_gpios(ACPI_COMPANION(dev));
+	return error;
 }
 
 /**
@@ -1049,6 +1089,8 @@ static int goodix_ts_remove(struct i2c_client *client)
 	}
 
 	sysfs_remove_group(&client->dev.kobj, &goodix_attr_group);
+	if (ACPI_HANDLE(&ts->client->dev))
+		acpi_dev_remove_driver_gpios(ACPI_COMPANION(&ts->client->dev));
 
 	return 0;
 }
